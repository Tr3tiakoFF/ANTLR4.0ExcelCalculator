//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Administrator\source\repos\OOPFirstLab\OOPFirstLab\ANTLR\ExcelCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OOPFirstLab.ANTLR {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExcelCalculatorParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IExcelCalculatorVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>MultiplicativeExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpr([NotNull] ExcelCalculatorParser.MultiplicativeExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>NotFunctionExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotFunctionExpr([NotNull] ExcelCalculatorParser.NotFunctionExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>AdditiveExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpr([NotNull] ExcelCalculatorParser.AdditiveExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberExpr([NotNull] ExcelCalculatorParser.NumberExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpr([NotNull] ExcelCalculatorParser.IdentifierExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesizedExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpr([NotNull] ExcelCalculatorParser.ParenthesizedExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>LogicFunctionExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicFunctionExpr([NotNull] ExcelCalculatorParser.LogicFunctionExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>LogicFunctorExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicFunctorExpr([NotNull] ExcelCalculatorParser.LogicFunctorExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ArithmeticFunctionExpr</c>
	/// labeled alternative in <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticFunctionExpr([NotNull] ExcelCalculatorParser.ArithmeticFunctionExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ExcelCalculatorParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompileUnit([NotNull] ExcelCalculatorParser.CompileUnitContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ExcelCalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] ExcelCalculatorParser.ExpressionContext context);
}
} // namespace OOPFirstLab.ANTLR
