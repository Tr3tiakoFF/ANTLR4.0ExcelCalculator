//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Administrator\source\repos\OOPFirstLab\OOPFirstLab\ANTLR\ExcelCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OOPFirstLab.ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ExcelCalculatorLexer : Lexer {
	public const int
		T__0=1, NUMBER=2, INT=3, IDENTIFIER=4, NOT=5, AND=6, OR=7, EQUALLITYDIGIT=8, 
		MOREDIGIT=9, LESSDIGIT=10, MOD=11, DIV=12, MULTIPLY=13, DIVIDE=14, ADD=15, 
		SUBTRACT=16, LPAREN=17, RPAREN=18, WS=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "NUMBER", "INT", "IDENTIFIER", "NOT", "AND", "OR", "EQUALLITYDIGIT", 
		"MOREDIGIT", "LESSDIGIT", "MOD", "DIV", "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", 
		"LPAREN", "RPAREN", "WS"
	};


	public ExcelCalculatorLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, "'not'", "'and'", "'or'", "'='", "'>'", 
		"'<'", "'mod'", "'div'", "'*'", "'/'", "'+'", "'-'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NUMBER", "INT", "IDENTIFIER", "NOT", "AND", "OR", "EQUALLITYDIGIT", 
		"MOREDIGIT", "LESSDIGIT", "MOD", "DIV", "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", 
		"LPAREN", "RPAREN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExcelCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x15h\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x5\x3/\n\x3\x3\x4\x6\x4\x32\n\x4\r\x4\xE\x4\x33\x3"+
		"\x5\x6\x5\x37\n\x5\r\x5\xE\x5\x38\x3\x5\x6\x5<\n\x5\r\x5\xE\x5=\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3"+
		"\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x2\x2\x2\x15\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v"+
		"\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15\x3\x2\x5"+
		"\x3\x2\x43\\\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"k\x2\x3\x3\x2\x2\x2\x2\x5\x3"+
		"\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2"+
		"\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2"+
		"\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x3)\x3\x2\x2\x2\x5+\x3\x2\x2\x2\a\x31"+
		"\x3\x2\x2\x2\t\x36\x3\x2\x2\x2\v?\x3\x2\x2\x2\r\x43\x3\x2\x2\x2\xFG\x3"+
		"\x2\x2\x2\x11J\x3\x2\x2\x2\x13L\x3\x2\x2\x2\x15N\x3\x2\x2\x2\x17P\x3\x2"+
		"\x2\x2\x19T\x3\x2\x2\x2\x1BX\x3\x2\x2\x2\x1DZ\x3\x2\x2\x2\x1F\\\x3\x2"+
		"\x2\x2!^\x3\x2\x2\x2#`\x3\x2\x2\x2%\x62\x3\x2\x2\x2\'\x64\x3\x2\x2\x2"+
		")*\a.\x2\x2*\x4\x3\x2\x2\x2+.\x5\a\x4\x2,-\a\x30\x2\x2-/\x5\a\x4\x2.,"+
		"\x3\x2\x2\x2./\x3\x2\x2\x2/\x6\x3\x2\x2\x2\x30\x32\x4\x32;\x2\x31\x30"+
		"\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2"+
		"\x2\x34\b\x3\x2\x2\x2\x35\x37\t\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\x38\x3"+
		"\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39;\x3\x2\x2\x2:<\t"+
		"\x3\x2\x2;:\x3\x2\x2\x2<=\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>\n\x3"+
		"\x2\x2\x2?@\ap\x2\x2@\x41\aq\x2\x2\x41\x42\av\x2\x2\x42\f\x3\x2\x2\x2"+
		"\x43\x44\a\x63\x2\x2\x44\x45\ap\x2\x2\x45\x46\a\x66\x2\x2\x46\xE\x3\x2"+
		"\x2\x2GH\aq\x2\x2HI\at\x2\x2I\x10\x3\x2\x2\x2JK\a?\x2\x2K\x12\x3\x2\x2"+
		"\x2LM\a@\x2\x2M\x14\x3\x2\x2\x2NO\a>\x2\x2O\x16\x3\x2\x2\x2PQ\ao\x2\x2"+
		"QR\aq\x2\x2RS\a\x66\x2\x2S\x18\x3\x2\x2\x2TU\a\x66\x2\x2UV\ak\x2\x2VW"+
		"\ax\x2\x2W\x1A\x3\x2\x2\x2XY\a,\x2\x2Y\x1C\x3\x2\x2\x2Z[\a\x31\x2\x2["+
		"\x1E\x3\x2\x2\x2\\]\a-\x2\x2] \x3\x2\x2\x2^_\a/\x2\x2_\"\x3\x2\x2\x2`"+
		"\x61\a*\x2\x2\x61$\x3\x2\x2\x2\x62\x63\a+\x2\x2\x63&\x3\x2\x2\x2\x64\x65"+
		"\t\x4\x2\x2\x65\x66\x3\x2\x2\x2\x66g\b\x14\x2\x2g(\x3\x2\x2\x2\a\x2.\x33"+
		"\x38=\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace OOPFirstLab.ANTLR
